<project name="tao-community-package" default="help" basedir=".">
	<property file="./build.properties" />
	<property name="log.path" value="/dev/stderr" />
	<property name="package.source" value="*" />
	<property environment="env" />
	<property name="github.token" value="${env.GITHUB_TOKEN}" />
  <php expression="preg_replace('/^refs\/tags\/(.*)/','$1','${env.CPHP_GIT_REF}')" returnProperty="github.tag"/>
  <php expression="preg_replace('/^refs\/tags\/.*-([0-9.]*)/','$1','${env.CPHP_GIT_REF}')" returnProperty="release.version"/>
  <php expression="preg_replace('/([0-9]*)\.([0-9]*)\.?([0-9]*)?/','$1','${release.version}')" returnProperty="release.version.major"/>
  <php expression="preg_replace('/([0-9]*)\.([0-9]*)\.?([0-9]*)?/','$2','${release.version}')" returnProperty="release.version.minor"/>
  <php expression="preg_replace('/([0-9]*)\.([0-9]*)\.?([0-9]*)?/','$3','${release.version}')" returnProperty="release.version.bugfix"/>
  <php expression="preg_replace('/^refs\/tags\/(.*)/','$1','${env.CPHP_GIT_REF}').'.tar.gz'" returnProperty="package.output.tar"/>
  <php expression="preg_replace('/^refs\/tags\/(.*)/','$1','${env.CPHP_GIT_REF}').'.noarch.rpm'" returnProperty="package.output.rpm"/>
	<property name="build.deb.name" value="tao-community_${release.version.major}.${release.version.minor}-${release.version.bugfix}" />
	<property name="build.ppa.name" value="tao-community-${release.version.major}.${release.version.minor}.${release.version.bugfix}" />
	<property name="package.output.deb" value="${build.deb.name}.deb" />
	<property name="package.output.ppa" value="${build.ppa.name}.deb" />
	<property name="package.vendor.pdfjs" value="pdfjs-${vendor.pdfjs.version}.tar.gz" />
	<property name="package.vendor.pdfjs.name" value="tao-community-pdfjs-${vendor.pdfjs.version}" />
	<property name="package.vendor.pdfjs.deb" value="${package.vendor.pdfjs.name}.deb" />
	<property name="package.vendor.pdfjs.rpm" value="${package.vendor.pdfjs.name}.rpm" />
	<property name="package.vendor.mathjax" value="MathJax-${vendor.mathjax.version}.tar.gz" />
	<property name="package.vendor.mathjax.name" value="tao-community-mathjax-${vendor.mathjax.version}" />
	<property name="package.vendor.mathjax.deb" value="${package.vendor.mathjax.name}.deb" />
	<property name="package.vendor.mathjax.rpm" value="${package.vendor.mathjax.name}.rpm" />
  <exec command="git ls-remote --get-url |  sed -E -e 's@^(.*)[:](.*)/(.*)$@\2@' -e's/\.git//'" outputProperty="github.owner"/>
  <exec command="git ls-remote --get-url |  sed -E -e 's@^(.*)[:](.*)/(.*)$@\3@' -e's/\.git//'" outputProperty="github.repo"/>

    <target name="help" description="List available targets">
        <exec executable="phing"
              passthru="true">
            <arg value="-l"/>
        </exec>
    </target>

		<target name="continuous-deps">
			<exec command="apt-get install -y dh-make bzr-builddeb"
              error="${log.path}"
              passthru="true"
              checkreturn="true"/>
		</target>

		<target name="prepare-env">
			  <exec command="mkdir -p build releases"
              error="${log.path}"
              checkreturn="true"/>
		</target>

		<target name="build">
			  <exec command="composer install -o --no-interaction --ansi --no-progress --no-dev"
              error="${log.path}"
							dir="source/app"
              checkreturn="true"/>
		</target>

		<target name="vendor-pdfjs-tar" depends="prepare-env" description="Create a tar from the application source">
			  <property name="build.vendor.pdfjs.path" value="./build/vendor/pdfjs" override="true" />
        <echo msg="Creating the package ${package.vendor.pdfjs}"/>
	      <exec command="rm -rf ${build.vendor.pdfjs.path} ; mkdir -p ${build.vendor.pdfjs.path} ; wget --quiet -O ${build.vendor.pdfjs.path}/pdfjs.zip ${vendor.pdfjs.release}"
              error="${log.path}"
              checkreturn="true"/>
				<exec command="unzip pdfjs.zip ; rm pdfjs.zip"
              error="${log.path}"
							dir="${build.vendor.pdfjs.path}"
              checkreturn="true"/>
	      <exec command="tar -c --exclude=. --exclude=.. -z -f ../../../releases/${package.vendor.pdfjs} * .*"
					    dir="${build.vendor.pdfjs.path}"
              error="${log.path}"
              passthru="true"
              checkreturn="true"/>
		</target>

		<target name="vendor-mathjax-tar" depends="prepare-env" description="Create a tar from the application source">
			  <property name="build.vendor.mathjax.path" value="./build/vendor/mathjax" override="true" />
        <echo msg="Creating the package ${package.vendor.mathjax}"/>
	      <exec command="rm -rf ${build.vendor.mathjax.path} ; mkdir -p ${build.vendor.mathjax.path} ; wget --quiet -O ${build.vendor.mathjax.path}/../mathjax.tar.gz ${vendor.mathjax.release}"
              error="${log.path}"
              checkreturn="true"/>
				<exec command="tar xfz ${build.vendor.mathjax.path}/../mathjax.tar.gz --strip-components=1 -C ${build.vendor.mathjax.path} -X source/vendor/mathjax/tar-exclude.lst"
              error="${log.path}"
              checkreturn="true"/>
	      <exec command="tar -c --exclude=. --exclude=.. -z -f ../../../releases/${package.vendor.mathjax} * .*"
					    dir="${build.vendor.mathjax.path}"
              error="${log.path}"
              passthru="true"
              checkreturn="true"/>
		</target>

		<target name="pack-tar" depends="prepare-env" description="Create a tar from the application source">
        <echo msg="Creating the package ${package.output.tar}"/>
	      <exec command="mkdir -p releases"
              error="${log.path}"
              checkreturn="true"/>
	      <exec command="tar -c -z --exclude=tao/views/locales --exclude=taoQtiItem/views/js/portableSharedLibraries --exclude=.git --exclude=*/.git --exclude=. --exclude=.. -f ../../releases/${package.output.tar} * .*"
					    dir="source/app"
              error="${log.path}"
              passthru="true"
              checkreturn="true"/>
    </target>

    <target name="pack-ppa" description="create a ppa from the application source">
			  <fail msg="not yet implemented" />
			  <property name="build.ppa.path" value="./build/ppa/${build.ppa.name}" override="true"/>
        <echo msg="copy source package ${package.output.tar} to ppa build environement"/>
	      <exec command="rm -rf ${build.ppa.path} ; mkdir -p ${build.ppa.path} ; cp releases/${package.output.tar} ${build.ppa.path}/"
              error="${log.path}"
              checkreturn="true"/>
	      <exec command="mkdir -p usr/share/tao-community ; tar xfz ${package.output.tar} -C usr/share/tao-community"
					    dir="${build.ppa.path}"
              error="${log.path}"
              passthru="true"
              checkreturn="true"/>
	      <exec command="mv ${package.output.tar} ../${build.ppa.name}.orig.tar.gz"
					    dir="${build.ppa.path}"
              error="${log.path}"
              passthru="true"
              checkreturn="true"/>
	      <exec command="DEBFULLNAME='Open Assessment Technologies S.A.' dh_make --native -y -i -e support@taotesting.com -c gpl2 -p tao-community"
					    dir="${build.ppa.path}"
              error="${log.path}"
              passthru="true"
              checkreturn="true"/>
				<exec command="echo 'usr/share/tao-community/* usr/share/tao-community/' >debian/install"
					    dir="${build.ppa.path}"
              error="${log.path}"
              passthru="true"
              checkreturn="true"/>

	      <exec command="rm debian/*.ex ; debuild -S -sa --source-option=--include-binaries"
					    dir="${build.ppa.path}"
              error="${log.path}"
              passthru="true"
              checkreturn="true"/>
    </target>

    <target name="pack-deb" depends="pack-tar" description="create a deb from the application source">
			  <property name="build.deb.path" value="./build/deb/${build.deb.name}" override="true"/>
        <echo msg="copy source package ${package.output.tar} to deb build environement"/>
	      <exec command="rm -rf ${build.deb.path} ; mkdir -p ${build.deb.path}/DEBIAN ; cp releases/${package.output.tar} ${build.deb.path}/"
              error="${log.path}"
              checkreturn="true"/>
	      <exec command="mkdir -p usr/share/tao-community ; tar xfz ${package.output.tar} -C usr/share/tao-community"
					    dir="${build.deb.path}"
              error="${log.path}"
              passthru="true"
              checkreturn="true"/>
	      <exec command="rm -f ${package.output.tar}"
					    dir="${build.deb.path}"
              error="${log.path}"
              passthru="true"
              checkreturn="true"/>
	      <exec command="cp -a ./source/deb/* ${build.deb.path}/"
              error="${log.path}"
              passthru="true"
              checkreturn="true"/>
	      <exec command="echo 'Version: ${release.version.major}.${release.version.minor}-${release.version.bugfix}' >>${build.deb.path}/DEBIAN/control"
              error="${log.path}"
              passthru="true"
              checkreturn="true"/>
	      <exec command="dpkg-deb -b ${build.deb.name}"
					    dir="${build.deb.path}/.."
              error="${log.path}"
              passthru="true"
              checkreturn="true"/>
	      <exec command="mv ${build.deb.path}.deb ./releases/"
              passthru="true"
              error="${log.path}"
              checkreturn="true"/>
    </target>


    <target name="vendor-pdfjs-deb" depends="vendor-pdfjs-tar" description="Create a deb from the application source">
			  <property name="build.deb.path" value="./build/deb-pdfjs/${package.vendor.pdfjs.name}" override="true"/>
        <echo msg="Copy source package ${package.output.tar} to DEB build environement"/>
	      <exec command="rm -rf ${build.deb.path} ; mkdir -p ${build.deb.path}/ ; cp releases/${package.vendor.pdfjs}  ${build.deb.path}/"
              error="${log.path}"
              checkreturn="true"/>
        <echo msg="Creating the package ${package.vendor.pdfjs.deb}"/>
	      <exec command="mkdir -p usr/share/tao-community/tao/views/js/lib/pdfjs ; tar xfz ${package.vendor.pdfjs} -C usr/share/tao-community/tao/views/js/lib/pdfjs"
					    dir="${build.deb.path}"
              error="${log.path}"
              passthru="true"
              checkreturn="true"/>
	      <exec command="rm -f ${package.vendor.pdfjs}"
					    dir="${build.deb.path}"
              error="${log.path}"
              passthru="true"
              checkreturn="true"/>
	      <exec command="cp -a ./source/vendor/pdfjs/deb/* ${build.deb.path}/"
              error="${log.path}"
              passthru="true"
              checkreturn="true"/>
	      <exec command="echo 'Version: ${vendor.pdfjs.version}' >>${build.deb.path}/DEBIAN/control"
              error="${log.path}"
              passthru="true"
              checkreturn="true"/>
	      <exec command="dpkg-deb -b ${package.vendor.pdfjs.name}"
					    dir="${build.deb.path}/.."
              error="${log.path}"
              passthru="true"
              checkreturn="true"/>
	      <exec command="mv ${build.deb.path}/../${package.vendor.pdfjs.deb} ./releases/"
              passthru="true"
              error="${log.path}"
              checkreturn="true"/>
    </target>

    <target name="vendor-mathjax-deb" depends="vendor-mathjax-tar" description="Create a deb from the application source">
			  <property name="build.deb.path" value="./build/deb-mathjax/${package.vendor.mathjax.name}"  override="true"/>
        <echo msg="Copy source package ${package.vendor.mathjax} to DEB build environement"/>
	      <exec command="rm -rf ${build.deb.path} ; mkdir -p ${build.deb.path}/ ; cp releases/${package.vendor.mathjax}  ${build.deb.path}/"
              error="${log.path}"
              checkreturn="true"/>
        <echo msg="Creating the package ${package.vendor.mathjax.deb}"/>
	      <exec command="mkdir -p usr/share/tao-community/taoQtiItem/views/js/mathjax ; tar xfz ${package.vendor.mathjax} -C usr/share/tao-community/taoQtiItem/views/js/mathjax"
					    dir="${build.deb.path}"
              error="${log.path}"
              passthru="true"
              checkreturn="true"/>
	      <exec command="rm -f ${package.vendor.mathjax}"
					    dir="${build.deb.path}"
              error="${log.path}"
              passthru="true"
              checkreturn="true"/>
	      <exec command="cp -a ./source/vendor/mathjax/deb/* ${build.deb.path}/"
              error="${log.path}"
              passthru="true"
              checkreturn="true"/>
	      <exec command="echo 'Version: ${vendor.mathjax.version}' >>${build.deb.path}/DEBIAN/control"
              error="${log.path}"
              passthru="true"
              checkreturn="true"/>
	      <exec command="dpkg-deb -b ${package.vendor.mathjax.name}"
					    dir="${build.deb.path}/.."
              error="${log.path}"
              passthru="true"
              checkreturn="true"/>
	      <exec command="mv ${build.deb.path}/../${package.vendor.mathjax.deb} ./releases/"
              passthru="true"
              error="${log.path}"
              checkreturn="true"/>
    </target>

    <target name="vendor-pdfjs-rpm" depends="vendor-pdfjs-tar" description="Create a rpm from the application source">
			  <property name="build.rpm.path" value="./build/rpm-pdfjs/" override="true" />
        <echo msg="Copy source package ${package.output.tar} to RPM build environement"/>
	      <exec command="rm -rf ${build.rpm.path} ; mkdir -p ${build.rpm.path}/SOURCES/ ; cp releases/${package.vendor.pdfjs}  ${build.rpm.path}/SOURCES/"
              error="${log.path}"
              checkreturn="true"/>
        <echo msg="Creating the package ${package.vendor.pdfjs.rpm}"/>
	      <exec command="PJ_VERSION='${vendor.pdfjs.version}' rpmbuild -ba ./source/vendor/pdfjs/rpm/tao-community-pdfjs.spec --target noarch --define '_topdir ${phing.dir}/${build.rpm.path}' --define '_rpmfilename ${package.vendor.pdfjs.rpm}'"
              error="${log.path}"
              checkreturn="true"/>
	      <exec command="mv ${build.rpm.path}/RPMS/${package.vendor.pdfjs.rpm} ./releases/"
              error="${log.path}"
              checkreturn="true"/>
    </target>

    <target name="vendor-mathjax-rpm" depends="vendor-mathjax-tar" description="Create a rpm from the application source">
			  <property name="build.rpm.path" value="./build/rpm-mathjax/" override="true" />
        <echo msg="Copy source package ${package.output.tar} to RPM build environement"/>
	      <exec command="rm -rf ${build.rpm.path} ; mkdir -p ${build.rpm.path}/SOURCES/ ; cp releases/${package.vendor.mathjax}  ${build.rpm.path}/SOURCES/"
              error="${log.path}"
              checkreturn="true"/>
        <echo msg="Creating the package ${package.vendor.mathjax.rpm}"/>
	      <exec command="MJ_VERSION='${vendor.mathjax.version}' rpmbuild -ba ./source/vendor/mathjax/rpm/tao-community-mathjax.spec --target noarch --define '_topdir ${phing.dir}/${build.rpm.path}' --define '_rpmfilename ${package.vendor.mathjax.rpm}'"
              error="${log.path}"
              checkreturn="true"/>
	      <exec command="mv ${build.rpm.path}/RPMS/${package.vendor.mathjax.rpm} ./releases/"
              error="${log.path}"
              checkreturn="true"/>
    </target>

    <target name="pack-rpm" depends="pack-tar" description="Create a rpm from the application source">
			  <property name="build.rpm.path" value="./build/rpm/" override="true" />
        <echo msg="Copy source package ${package.output.tar} to RPM build environement"/>
	      <exec command="rm -rf ${build.rpm.path} ; mkdir -p ${build.rpm.path}/SOURCES/ ; cp releases/${package.output.tar} ${build.rpm.path}/SOURCES/"
              error="${log.path}"
              checkreturn="true"/>
        <echo msg="Copy additional files for RPM build"/>
	      <exec command="tar -c -z -f ../../${build.rpm.path}/SOURCES/tao-community-rpm-resources.tar.gz resources"
              error="${log.path}"
							dir="source/rpm"
              checkreturn="true"/>
        <echo msg="Creating the package ${package.output.rpm}"/>
	      <exec command="TAO_VERSION='${release.version}' rpmbuild -ba ./source/rpm/tao-community.spec --target noarch --define '_topdir ${phing.dir}/${build.rpm.path}' --define '_rpmfilename ${package.output.rpm}'"
              error="${log.path}"
              checkreturn="true"/>
	      <exec command="mv ${build.rpm.path}/RPMS/${package.output.rpm} ./releases/"
              error="${log.path}"
              checkreturn="true"/>
    </target>

		<target name="identify-release">
			<echo msg="Identifying release ID for ${github.tag}" />
			<exec command="curl -s -H 'Authorization: token ${github.token}' https://api.github.com/repos/${github.owner}/${github.repo}/releases/tags/${github.tag}  | xargs -0 node -e 'console.log(JSON.parse(process.argv[1]).id)'"
				      outputProperty="github.release.id"
              error="${log.path}"
              checkreturn="true"/>
		</target>

		<target name="push-tar" depends="pack-tar,identify-release">
			<echo msg="Pushing ${package.output.tar} to ${github.tag} (${github.release.id})" />
			<exec command="curl -H 'Authorization: token ${github.token}' -H 'Content-Type: application/octet-stream' --data-binary @'releases/${package.output.tar}' 'https://uploads.github.com/repos/${github.owner}/${github.repo}/releases/${github.release.id}/assets?name=${package.output.tar}'"
              error="${log.path}"
              checkreturn="true"/>
		</target>

		<target name="push-vendor-deb" depends="vendor-mathjax-deb,vendor-pdfjs-rpm,identify-release">
			<echo msg="Pushing ${package.vendor.mathjax.deb} to ${github.tag} (${github.release.id})" />
			<exec command="curl -H 'Authorization: token ${github.token}' -H 'Content-Type: application/octet-stream' --data-binary @'releases/${package.vendor.mathjax.deb}' 'https://uploads.github.com/repos/${github.owner}/${github.repo}/releases/${github.release.id}/assets?name=${package.vendor.mathjax.deb}'"
              error="${log.path}"
              checkreturn="true"/>
			<echo msg="Pushing ${package.vendor.pdfjs.deb} to ${github.tag} (${github.release.id})" />
			<exec command="curl -H 'Authorization: token ${github.token}' -H 'Content-Type: application/octet-stream' --data-binary @'releases/${package.vendor.pdfjs.deb}' 'https://uploads.github.com/repos/${github.owner}/${github.repo}/releases/${github.release.id}/assets?name=${package.vendor.pdfjs.deb}'"
              error="${log.path}"
              checkreturn="true"/>
		</target>

		<target name="push-vendor-rpm" depends="vendor-mathjax-rpm,vendor-pdfjs-rpm,identify-release">
			<echo msg="Pushing ${package.vendor.mathjax.rpm} to ${github.tag} (${github.release.id})" />
			<exec command="curl -H 'Authorization: token ${github.token}' -H 'Content-Type: application/octet-stream' --data-binary @'releases/${package.vendor.mathjax.rpm}' 'https://uploads.github.com/repos/${github.owner}/${github.repo}/releases/${github.release.id}/assets?name=${package.vendor.mathjax.rpm}'"
              error="${log.path}"
              checkreturn="true"/>
			<echo msg="Pushing ${package.vendor.pdfjs.rpm} to ${github.tag} (${github.release.id})" />
			<exec command="curl -H 'Authorization: token ${github.token}' -H 'Content-Type: application/octet-stream' --data-binary @'releases/${package.vendor.pdfjs.rpm}' 'https://uploads.github.com/repos/${github.owner}/${github.repo}/releases/${github.release.id}/assets?name=${package.vendor.pdfjs.rpm}'"
              error="${log.path}"
              checkreturn="true"/>
		</target>

		<target name="push-rpm" depends="pack-rpm,identify-release">
			<echo msg="Pushing ${package.output.rpm} to ${github.tag} (${github.release.id})" />
			<exec command="curl -H 'Authorization: token ${github.token}' -H 'Content-Type: application/octet-stream' --data-binary @'releases/${package.output.rpm}' 'https://uploads.github.com/repos/${github.owner}/${github.repo}/releases/${github.release.id}/assets?name=${package.output.rpm}'"
              error="${log.path}"
              checkreturn="true"/>
		</target>

		<target name="push-deb" depends="pack-deb,identify-release">
			<echo msg="Pushing ${package.output.deb} to ${github.tag} (${github.release.id})" />
			<exec command="curl -H 'Authorization: token ${github.token}' -H 'Content-Type: application/octet-stream' --data-binary @'releases/${package.output.deb}' 'https://uploads.github.com/repos/${github.owner}/${github.repo}/releases/${github.release.id}/assets?name=${package.output.deb}'"
              error="${log.path}"
              checkreturn="true"/>
		</target>
		<target name="push-all" depends="push-tar,push-rpm,push-deb,push-vendor-rpm,push-vendor-deb" />
</project>
